{{ $apps := .Values.global.apps.config }}
{{- range $name, $app := $apps }}
{{- if and ($app.enabled) (not (hasKey $app "mqConnectionNameList")) }}
{{- if (not ($.Values.global.mq.multiInstance.operatorsEnabled)) }}
{{- if (or ($.Values.global.mq.multiInstance.cephEnabled) ($.Values.global.mq.multiInstance.nfsEnabled)) }}
---
###############################################################################
# Copyright 2019,2020 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "mqserver.fullname" $ }}-{{ $name }}
  labels:
{{ include "mqserver.labels" $ | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "mqserver.fullname" $ }}-{{ $name }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  serviceName: {{ include "mqserver.fullname" $ }}-{{ $name }}
  replicas: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "mqserver.fullname" $ }}-{{ $name }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      {{- if $.Values.global.imagePullSecret.username }}
      imagePullSecrets:
        - name: {{ $.Release.Name }}-pull-secret
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        fsGroup: {{ $.Values.global.mq.security.context.fsGroup }}
        supplementalGroups:
        {{- range $group := $.Values.global.mq.security.context.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      volumes:
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
        - name: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
          persistentVolumeClaim:
            claimName: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
        - name: mqsc-cmds
          configMap:
            name: {{ $.Release.Name }}-mq-config
        {{- if $.Values.global.mq.tlsSecretName }}
        - name: service-certs
          secret:
            secretName: {{ $.Release.Name }}-{{ $.Values.global.mq.tlsSecretName }}
        {{- end}}
      containers:
        - name: {{ $.Chart.Name }}-{{ $name }}
          image: ibmcom/mq:{{ $.Values.global.mq.version }}
          imagePullPolicy: {{ $.Values.global.pullPolicy }}
          terminationMessagePath: "/run/termination-log"
          env:
            - name: LICENSE
              value: {{ $.Values.global.license }}
            - name: MQ_QMGR_NAME
              value: {{ $.Values.global.mq.queueManager.name }}
            - name: MQ_MULTI_INSTANCE
              {{- if ($.Values.global.mq.multiInstance.cephEnabled) }}
              value: "{{ $.Values.global.mq.multiInstance.cephEnabled | default false }}"
              {{- else if ($.Values.global.mq.multiInstance.nfsEnabled) }}
              value: "{{ $.Values.global.mq.multiInstance.nfsEnabled | default false }}"
              {{ end }}
            - name: LOG_FORMAT
              value: {{ $.Values.log.format | default "basic" }}
            - name: MQ_ENABLE_METRICS
              value: {{ $.Values.global.mq.metrics.enabled | default false | quote }}
            - name: DEBUG
              value: {{ $.Values.log.debug | default false | quote }}
            - name: MQ_EPHEMERAL_PREFIX
              value: /run/mqm
            - name: MQ_DEV
              value: "false"
            - name: MQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.adminPasswordKey }}
            - name: MQ_APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ default (printf "%s-mq-credentials" $.Release.Name) $.Values.global.mq.queueManager.secret.name }}
                  key: {{ $.Values.global.mq.queueManager.secret.appPasswordKey }}
            - name: TZ
              value: {{ $.Values.global.timezone }}
          ports:
            - containerPort: 1414
            - containerPort: 9443
            - containerPort: 9157
          volumeMounts:
          - mountPath: /mnt/mqm-log
            name: {{ $.Release.Namespace }}-{{ $name }}-pvc-logs
          - mountPath: /mnt/mqm-data
            name: {{ $.Release.Namespace }}-{{ $name }}-pvc-data
          - mountPath: /mnt/mqm
            name: {{ $.Release.Namespace }}-{{ $name }}-pvc-qm
          - name: mqsc-cmds
            mountPath: /etc/mqm/20-config.mqsc
            subPath: config.mqsc
          - name: mqsc-cmds
            mountPath: /etc/mqm/30-channel.mqsc
            subPath: channel_{{$name}}.mqsc
          {{- if $.Values.global.mq.tlsSecretName }}
          - name: service-certs
            mountPath: /etc/mqm/pki/keys/ibmwebspheremq{{ $.Values.global.mq.queueManager.name | default "QM1" | lower }}
            readOnly: true
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            privileged: false
            capabilities:
              drop:
                - ALL
          # Set liveness probe to determine if the queue manager is running
          livenessProbe:
            exec:
              command:
              - chkmqhealthy
            initialDelaySeconds: {{ $.Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the MQ listener is running
          readinessProbe:
            exec:
              command:
              - chkmqready
            initialDelaySeconds: {{ $.Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ $.Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ $.Values.readinessProbe.failureThreshold }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
